{"version":3,"sources":["Modal.tsx"],"names":["React","Animated","BackHandler","Easing","StyleSheet","TouchableWithoutFeedback","SafeAreaView","Surface","withTheme","Modal","state","opacity","Value","props","visible","rendered","_handleBack","dismissable","_hideModal","_showModal","scale","theme","animation","removeEventListener","addEventListener","timing","toValue","duration","easing","ease","useNativeDriver","start","finished","onDismiss","setState","prevProps","children","contentContainerStyle","colors","absoluteFill","undefined","styles","backdrop","backgroundColor","wrapper","content","nextProps","prevState","Component","defaultProps","create","flex","absoluteFillObject","justifyContent"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  BackHandler,\n  Easing,\n  StyleProp,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  ViewStyle,\n} from 'react-native';\nimport SafeAreaView from 'react-native-safe-area-view';\nimport Surface from './Surface';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\ntype Props = {\n  /**\n   * Determines whether clicking outside the modal dismiss it.\n   */\n  dismissable?: boolean;\n  /**\n   * Callback that is called when the user dismisses the modal.\n   */\n  onDismiss?: () => void;\n  /**\n   * Determines Whether the modal is visible.\n   */\n  visible: boolean;\n  /**\n   * Content of the `Modal`.\n   */\n  children: React.ReactNode;\n  /**\n   * Style for the content of the modal\n   */\n  contentContainerStyle?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  opacity: Animated.Value;\n  rendered: boolean;\n};\n\n/**\n * The Modal component is a simple way to present content above an enclosing view.\n * To render the `Modal` above other components, you'll need to wrap it with the [`Portal`](portal.html) component.\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { Modal, Portal, Text, Button, Provider } from 'react-native-paper';\n *\n * export default class MyComponent extends React.Component {\n *   state = {\n *     visible: false,\n *   };\n *\n *   _showModal = () => this.setState({ visible: true });\n *   _hideModal = () => this.setState({ visible: false });\n *\n *   render() {\n *     const { visible } = this.state;\n *     return (\n *       <Provider>\n *          <Portal>\n *            <Modal visible={visible} onDismiss={this._hideModal}>\n *              <Text>Example Modal</Text>\n *            </Modal>\n *            <Button\n *              style={{ marginTop: 30 }}\n *              onPress={this._showModal}\n *            >\n *              Show\n *            </Button>\n *          </Portal>\n *       </Provider>\n *     );\n *   }\n * }\n * ```\n */\n\nclass Modal extends React.Component<Props, State> {\n  static defaultProps = {\n    dismissable: true,\n    visible: false,\n  };\n\n  static getDerivedStateFromProps(nextProps: Props, prevState: State) {\n    if (nextProps.visible && !prevState.rendered) {\n      return {\n        rendered: true,\n      };\n    }\n\n    return null;\n  }\n\n  state = {\n    opacity: new Animated.Value(this.props.visible ? 1 : 0),\n    rendered: this.props.visible,\n  };\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.visible !== this.props.visible) {\n      if (this.props.visible) {\n        this._showModal();\n      } else {\n        this._hideModal();\n      }\n    }\n  }\n\n  _handleBack = () => {\n    if (this.props.dismissable) {\n      this._hideModal();\n    }\n    return true;\n  };\n\n  _showModal = () => {\n    const {\n      theme: {\n        animation: { scale },\n      },\n    } = this.props;\n\n    BackHandler.removeEventListener('hardwareBackPress', this._handleBack);\n    BackHandler.addEventListener('hardwareBackPress', this._handleBack);\n    Animated.timing(this.state.opacity, {\n      toValue: 1,\n      duration: scale * 280,\n      easing: Easing.ease,\n      useNativeDriver: true,\n    }).start();\n  };\n\n  _hideModal = () => {\n    const {\n      theme: {\n        animation: { scale },\n      },\n    } = this.props;\n\n    BackHandler.removeEventListener('hardwareBackPress', this._handleBack);\n    Animated.timing(this.state.opacity, {\n      toValue: 0,\n      duration: scale * 280,\n      easing: Easing.ease,\n      useNativeDriver: true,\n    }).start(({ finished }) => {\n      if (!finished) {\n        return;\n      }\n      if (this.props.visible && this.props.onDismiss) {\n        this.props.onDismiss();\n      }\n      if (this.props.visible) {\n        this._showModal();\n      } else {\n        this.setState({\n          rendered: false,\n        });\n      }\n    });\n  };\n\n  componentWillUnmount() {\n    BackHandler.removeEventListener('hardwareBackPress', this._handleBack);\n  }\n\n  render() {\n    if (!this.state.rendered) return null;\n\n    const { children, dismissable, theme, contentContainerStyle } = this.props;\n    const { colors } = theme;\n    return (\n      <Animated.View\n        pointerEvents={this.props.visible ? 'auto' : 'none'}\n        accessibilityViewIsModal\n        accessibilityLiveRegion=\"polite\"\n        style={StyleSheet.absoluteFill}\n      >\n        <TouchableWithoutFeedback\n          onPress={dismissable ? this._hideModal : undefined}\n        >\n          <Animated.View\n            style={[\n              styles.backdrop,\n              { backgroundColor: colors.backdrop, opacity: this.state.opacity },\n            ]}\n          />\n        </TouchableWithoutFeedback>\n        <SafeAreaView style={styles.wrapper}>\n          <Surface\n            style={\n              [\n                { opacity: this.state.opacity },\n                styles.content,\n                contentContainerStyle,\n              ] as StyleProp<ViewStyle>\n            }\n          >\n            {children}\n          </Surface>\n        </SafeAreaView>\n      </Animated.View>\n    );\n  }\n}\n\nexport default withTheme(Modal);\n\nconst styles = StyleSheet.create({\n  backdrop: {\n    flex: 1,\n  },\n  wrapper: {\n    ...StyleSheet.absoluteFillObject,\n    justifyContent: 'center',\n  },\n  content: {\n    backgroundColor: 'transparent',\n    justifyContent: 'center',\n  },\n});\n"]}