{"version":3,"sources":["ProgressBar.tsx"],"names":["React","Animated","Platform","StyleSheet","View","setColor","withTheme","INDETERMINATE_DURATION","INDETERMINATE_MAX_WIDTH","ProgressBar","state","width","timer","Value","fade","indeterminateAnimation","_onLayout","event","visible","props","previousWidth","setState","nativeEvent","layout","_startAnimation","prevProps","progress","_stopAnimation","indeterminate","timing","duration","toValue","useNativeDriver","isInteraction","start","OS","setValue","loop","stop","color","style","theme","tintColor","colors","primary","trackTintColor","alpha","rgb","string","styles","container","backgroundColor","opacity","progressBar","transform","translateX","interpolate","inputRange","outputRange","scaleX","Component","defaultProps","create","height","overflow","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  Platform,\n  StyleSheet,\n  View,\n  ViewStyle,\n  StyleProp,\n  LayoutChangeEvent,\n} from 'react-native';\nimport setColor from 'color';\nimport { withTheme } from '../core/theming';\nimport { Theme } from '../types';\n\ntype Props = {\n  /**\n   * Progress value (between 0 and 1).\n   */\n  progress?: number;\n  /**\n   * Color of the progress bar. The background color will be calculated based on this but you can change it by passing `backgroundColor` to `style` prop.\n   */\n  color?: string;\n  /**\n   * If the progress bar will show indeterminate progress.\n   */\n  indeterminate?: boolean;\n  /**\n   * Whether to show the ProgressBar (true, the default) or hide it (false).\n   */\n  visible?: boolean;\n  style?: StyleProp<ViewStyle>;\n  /**\n   * @optional\n   */\n  theme: Theme;\n};\n\ntype State = {\n  width: number;\n  fade: Animated.Value;\n  timer: Animated.Value;\n};\n\nconst INDETERMINATE_DURATION = 2000;\nconst INDETERMINATE_MAX_WIDTH = 0.6;\n\n/**\n * Progress bar is an indicator used to present progress of some activity in the app.\n *\n * <div class=\"screenshots\">\n *   <img src=\"screenshots/progress-bar.png\" />\n * </div>\n *\n * ## Usage\n * ```js\n * import * as React from 'react';\n * import { ProgressBar, Colors } from 'react-native-paper';\n *\n * const MyComponent = () => (\n *   <ProgressBar progress={0.5} color={Colors.red800} />\n * );\n *\n * export default MyComponent;\n * ```\n */\nclass ProgressBar extends React.Component<Props, State> {\n  static defaultProps = {\n    visible: true,\n    progress: 0,\n  };\n\n  state = {\n    width: 0,\n    timer: new Animated.Value(0),\n    fade: new Animated.Value(0),\n  };\n\n  indeterminateAnimation: Animated.CompositeAnimation | null = null;\n\n  componentDidUpdate(prevProps: Props) {\n    const { visible, progress } = this.props;\n\n    if (progress !== prevProps.progress || visible !== prevProps.visible) {\n      if (visible) {\n        this._startAnimation();\n      } else {\n        this._stopAnimation();\n      }\n    }\n  }\n\n  _onLayout = (event: LayoutChangeEvent) => {\n    const { visible } = this.props;\n    const { width: previousWidth } = this.state;\n\n    this.setState({ width: event.nativeEvent.layout.width }, () => {\n      // Start animation the very first time when previously the width was unclear\n      if (visible && previousWidth === 0) {\n        this._startAnimation();\n      }\n    });\n  };\n\n  _startAnimation() {\n    const { indeterminate, progress } = this.props;\n    const { fade, timer } = this.state;\n\n    // Show progress bar\n    Animated.timing(fade, {\n      duration: 200,\n      toValue: 1,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n\n    // Animate progress bar\n    if (indeterminate) {\n      if (!this.indeterminateAnimation) {\n        this.indeterminateAnimation = Animated.timing(timer, {\n          duration: INDETERMINATE_DURATION,\n          toValue: 1,\n          // Animated.loop does not work if useNativeDriver is true on web\n          useNativeDriver: Platform.OS !== 'web',\n          isInteraction: false,\n        });\n      }\n\n      // Reset timer to the beginning\n      timer.setValue(0);\n\n      Animated.loop(this.indeterminateAnimation).start();\n    } else {\n      Animated.timing(timer, {\n        duration: 200,\n        toValue: progress ? progress : 0,\n        useNativeDriver: true,\n        isInteraction: false,\n      }).start();\n    }\n  }\n\n  _stopAnimation() {\n    const { fade } = this.state;\n\n    // Stop indeterminate animation\n    if (this.indeterminateAnimation) {\n      this.indeterminateAnimation.stop();\n    }\n\n    Animated.timing(fade, {\n      duration: 200,\n      toValue: 0,\n      useNativeDriver: true,\n      isInteraction: false,\n    }).start();\n  }\n\n  render() {\n    const { color, indeterminate, style, theme } = this.props;\n    const { fade, timer, width } = this.state;\n    const tintColor = color || theme.colors.primary;\n    const trackTintColor = setColor(tintColor)\n      .alpha(0.38)\n      .rgb()\n      .string();\n\n    return (\n      <View onLayout={this._onLayout}>\n        <Animated.View\n          style={[\n            styles.container,\n            { backgroundColor: trackTintColor, opacity: fade },\n            style,\n          ]}\n        >\n          <Animated.View\n            style={[\n              styles.progressBar,\n              {\n                backgroundColor: tintColor,\n                width,\n                transform: [\n                  {\n                    translateX: timer.interpolate(\n                      indeterminate\n                        ? {\n                            inputRange: [0, 0.5, 1],\n                            outputRange: [\n                              -0.5 * width,\n                              -0.5 * INDETERMINATE_MAX_WIDTH * width,\n                              0.7 * width,\n                            ],\n                          }\n                        : {\n                            inputRange: [0, 1],\n                            outputRange: [-0.5 * width, 0],\n                          }\n                    ),\n                  },\n                  {\n                    // Workaround for workaround for https://github.com/facebook/react-native/issues/6278\n                    scaleX: timer.interpolate(\n                      indeterminate\n                        ? {\n                            inputRange: [0, 0.5, 1],\n                            outputRange: [\n                              0.0001,\n                              INDETERMINATE_MAX_WIDTH,\n                              0.0001,\n                            ],\n                          }\n                        : {\n                            inputRange: [0, 1],\n                            outputRange: [0.0001, 1],\n                          }\n                    ),\n                  },\n                ],\n              },\n            ]}\n          />\n        </Animated.View>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 4,\n    overflow: 'hidden',\n  },\n\n  progressBar: {\n    flex: 1,\n  },\n});\n\nexport default withTheme(ProgressBar);\n"]}